#!/bin/bash -eu

# set -o pipefail


###############################################################################
# os detection
###############################################################################

unameOut="$(uname -s)"
case "${unameOut}" in
    Linux*)     machine=Linux;;
    Darwin*)    machine=Mac;;
    CYGWIN*)    machine=Cygwin;;
    MINGW*)     machine=MinGw;;
    *)          machine="UNKNOWN:${unameOut}"
esac


###############################################################################
# define variables
###############################################################################


############ box sources - dev or production

ELASTIC="ts.elastic"
WINDOWS="ts.windows10"
UBUNTU="ts.ubuntu20.04"
#REDOPS="ts.redops"


############ dependency installs

RHELFAM=""


############ host stats in banner
CPU=""
MEM=""
DISK=""


############ coloring

ORANGE='\033[0;33m'
LIGHTRED='\033[1;31m'
RED='\033[0;31m'
LIGHTGREEN='\033[1;32m'
LIGHTPURPLE='\033[1;35m'
NC='\033[0m' # No Color


########### define Operator vars

#current_dir=$(pwd)

#cd ~/AppData/Roaming/Operator/portal.prelude.org

#export operator_session_key="$(sed -n -e 10p settings.yml | cut -d " " -f4)"
#export operator_login_email="$(sed -n -e 19p settings.yml | cut -d " " -f4)"
#export operator_login_token="$(sed -n -e 21p settings.yml | cut -d " " -f4)"

#cd $current_dir

###############################################################################
# define functions
###############################################################################


### Main Menu
main() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}    ________                      __     __  _${NC}            ";
        echo -e "${LIGHTPURPLE}   /_  __/ /  _______ __ _  __ __/ /__ _/ /_(_)__  ___  ${NC}  ";
        echo -e "${LIGHTPURPLE}    / / / _ \/ __/ -_)  ' \/ // / / _ \/ __/ / _ \/ _ \ ${NC}  ";
        echo -e "${LIGHTPURPLE}   /_/ /_//_/_/  \__/_/_/_/\_,_/_/\_,_/\__/_/\___/_//_/ ${NC}  ";
        echo -e "${LIGHTPURPLE}    ______       __  _                                  ${NC}  ";
        echo -e "${LIGHTPURPLE}   / __/ /____ _/ /_(_)__  ___  ${NC}    CPU usage..: $CPU     ";
        echo -e "${LIGHTPURPLE}  _\ \/ __/ _ \/ __/ / _ \/ _ \ ${NC}    Memory used: $MEM     ";
        echo -e "${LIGHTPURPLE} /___/\__/\_,_/\__/_/\___/_//_/ ${NC}    Disk usage.: $DISK    ";
        echo ""
        echo -e "${LIGHTPURPLE}  ATTACK with Operator <-----------> DETECT with Elastic${NC}"
        echo -e "${LIGHTPURPLE} ------------------------------------------------------${NC}";
        echo -e ""
        echo -e " 1. Setup........:  install dependencies (${ORANGE}experimental${NC})"
        echo " 2. Deploy.......:  create new thremulation range"
        echo " 3. Status.......:  show current deployment"
        echo " 4. Management...:  tune and troubleshoot"
        echo ""
        read -rp " Select Above Option [or (E)xit]: " yn
        case $yn in
            [1]* ) setup; break;;
            [2]* ) deploy; break;;
            [3]* ) status; break;;
            [4]* ) manage; break;;
            [Ee]* ) echo -e "\n Exiting..."; sleep 1; clear; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Main deployment screen, ask for quick or custom
setup() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________     ____    __               ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/    / __/__ / /___ _____      ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \     _\ \/ -_) __/ // / _ \     ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/    /___/\__/\__/\_,_/ .__/     ${NC}";
        echo -e "${LIGHTPURPLE}                                  /_/         ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo "1. macOS..........: supported"
        echo "2. Windows 10.....: supported"
        echo "3. Linux (RHEL)...: experimental"
        echo ""
        read -rp " Select your Host Operating System: " yn
        case $yn in
            [1]* ) setup_mac; break;;
            [2]* ) setup_windows; break;;
            [3]* ) setup_rhel; break;;
            [Bb]* ) clear; main; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Comment
setup_mac() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________     ____    __               ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/    / __/__ / /___ _____      ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \     _\ \/ -_) __/ // / _ \     ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/    /___/\__/\__/\_,_/ .__/     ${NC}";
        echo -e "${LIGHTPURPLE}                                  /_/         ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo -e " You have chosen macOS as your host Operating System. \n This option will attempt to install the required\n packages listed below."
        echo ""
        echo -e "${ORANGE} Before you proceed, make sure you have the Brew\n package manager installed!! [https://brew.sh]${NC}"
        echo ""
        echo ""
        echo "  virtualbox.....:  hypervisor"
        echo "  vagrant........:  automation"
        echo "  vagrant-plugin :  disksize"
        echo "  vagrant-plugin :  vbguest"
        echo "  ansible........:  provisioning"
        echo "  git............:  git the bits"
        echo ""
        echo ""
        read -rp " Proceed to install these packages? [Y/N]: " yn
        case $yn in
            [Yy]* )
                echo ""
                echo ""
                echo " Installing requirements...";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                echo "";
                echo "";
                setup_mac_install;
                echo "";
                echo "";
                echo "";
                echo " Install Complete! Returning to the Main Menu...";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                sleep 5;
                main; break;;
            [Nn]* )
                main;
                break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Mac install actions
setup_mac_install() {
    brew install --cask \
        virtualbox \
        vagrant;
    brew install \
        ansible \
        git;

vagrant plugin install \
    vagrant-disksize \
    vagrant-vbguest;
}


# Comment
setup_windows() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________     ____    __               ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/    / __/__ / /___ _____      ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \     _\ \/ -_) __/ // / _ \     ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/    /___/\__/\__/\_,_/ .__/     ${NC}";
        echo -e "${LIGHTPURPLE}                                  /_/         ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo -e " You have chosen Windows10 as your host Operating \n System. This option will attempt to install the\n required packages listed below. Note: Vagrant \n will required a restart when complete..."
        echo ""
        echo -e "${ORANGE} Make sure you have the Chocolatey package \n manager installed!! [https://chocolatey.org/]${NC}"
        echo ""
        echo ""
        echo "  virtualbox.....:  hypervisor"
        echo "  vagrant........:  automation"
        echo "  vagrant-plugin :  disksize"
        echo "  vagrant-plugin :  vbguest"
        echo "  ansible........:  provisioning"
        echo "  git............:  git the bits"
        echo "                    git-bash shell"
        echo ""
        read -rp " Proceed to install these packages? [Y/N]: " yn
        case $yn in
            [Yy]* )
                echo ""
                echo ""
                echo " Installing requirements...";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                echo "";
                echo "";
                setup_windows_install;
                echo "";
                echo "";
                echo "";
                echo " Install Complete! Returning to the Main Menu...";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                sleep 5;
                main; break;;
            [Nn]* )
                main;
                break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Windows install actions
setup_windows_install() {
    choco install -y virtualbox vagrant;
    choco install -y git;
    vagrant plugin install vagrant-disksize;
    vagrant plugin install vagrant-vbguest;
}


# Comment
setup_rhel() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________     ____    __               ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/    / __/__ / /___ _____      ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \     _\ \/ -_) __/ // / _ \     ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/    /___/\__/\__/\_,_/ .__/     ${NC}";
        echo -e "${LIGHTPURPLE}                                  /_/         ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo -e " You have chosen a RHEL-based distro (preferrably \n CENTOS7) as your host Operating System. This option \n will attempt to install the required packages: "
        echo ""
        echo ""
        echo "  virtualbox.....:  hypervisor"
        echo "  vagrant........:  automation"
        echo "  vagrant-plugin :  disksize"
        echo "  vagrant-plugin :  vbguest"
        # echo "  ansible........:  provisioning"
        # echo "  git............:  git the bits"
        echo ""
        echo ""
        read -rp " Proceed to install these packages? [Y/N]: " yn
        case $yn in
            [Yy]* )
                echo ""
                echo ""
                echo " Installing requirements...";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                echo "";
                echo "";
                setup_rhel_install;
                echo "";
                echo "";
                echo "";
                echo " Install Complete! Returning to the Main Menu...";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                sleep 5;
                main; break;;
            [Nn]* )
                main;
                break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Rhel install actions
setup_rhel_install() {

# If Linux, try to determine specific distribution
if [[ "${machine}" == "Linux" ]]; then

    # determine centos or fedora
    RHELFAM="$(sed s/\"//g /etc/os-release | grep -e "^ID=")"

    if [ "${RHELFAM}" == "ID=centos" ]; then
        CENTOS_install

    elif [ "${RHELFAM}" == "ID=fedora" ]; then
        fedora_install

    else
        echo "Detected an unsupported Linux Distro:"
        echo "See the full documentation for setup"
        echo "details: [https://docs.thremulation.io]"
    fi
fi
}

centos_install() {
    # install requirements
    sudo yum install -y \
    kernel-devel \
    kernel-devel-"$(uname -r)" \
    kernel-headers kernel-headers-"$(uname -r)" \
    make \
    patch \
    gcc \
    epel-release;

    #Install VirtualBox
    sudo curl -o /etc/yum.repos.d/virtualbox.repo http://download.virtualbox.org/virtualbox/rpm/rhel/virtualbox.repo
    sudo rpm --import https://www.virtualbox.org/download/oracle_vbox.asc
    sudo yum install -y VirtualBox-6.0
    sudo usermod -aG vboxusers "$(whoami)"

    #Install Vagrant
    sudo yum install -y https://releases.hashicorp.com/vagrant/2.2.14/vagrant_2.2.14_x86_64.rpm;
    vagrant plugin install vagrant-disksize;
    vagrant plugin install vagrant-vbguest;
}


fedora_install() {
    # install requirements
    sudo dnf install -y rpmrebuild

    "$(curl -o ~/VirtualBox-6.1-6.1.16_140961_fedora32-1.x86_64.rpm http://download.virtualbox.org/virtualbox/rpm/fedora/32/x86_64/VirtualBox-6.1-6.1.16_140961_fedora32-1.x86_64.rpm)"

    # rebuild vbox
    "$(rpmrebuild --change-spec-preamble='sed -e "s/6.1.16_140961_fedora32/6.1.16_140961_fedora33/"' --change-spec-requires='sed -e "s/python(abi) = 3.8/python(abi) >= 3.8/"' --package VirtualBox-6.1-6.1.16_140961_fedora32-1.x86_64.rpm)"

    # more deps
    sudo dnf install -y \
    binutils \
    gcc \
    make \
    patch \
    libgomp \
    glibc-headers \
    glibc-devel \
    kernel-headers \
    kernel-devel \
    dkms \
    qt5-qtx11extras \
    libxkbcommon

    #Install VirtualBox
    sudo dnf install -y ~/rpmbuild/RPMS/x86_64/VirtualBox-6.1-6.1.16_140961_fedora33-1.x86_64.rpm

    # vboxusers groupadd
    sudo usermod -aG vboxusers "$(whoami)"

    #Install Vagrant
    sudo dnf install -y https://releases.hashicorp.com/vagrant/2.2.10/vagrant_2.2.10_x86_64.rpm;
    vagrant plugin install vagrant-disksize;
    vagrant plugin install vagrant-vbguest;
}


# Main deployment screen, ask for quick or custom
deploy() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo "1. Quick Deployment....: deploy all target boxes"
        echo "2. Custom Deployment...: choose targets you want"
        echo "3. Staged Deployment...: download boxes you want"
        echo ""
        read -rp " Select Above Option: " yn
        case $yn in
            [1]* ) deploy_quick; break;;
            [2]* ) deploy_custom; break;;
            [3]* ) deploy_staged; break;;
            [Bb]* ) clear; main; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Quick deploy is all the things
deploy_quick() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo " You have chosen to Quick-Deploy all boxes."
        echo " This includes the following configuration:"
        echo ""
        echo "    Elastic.....:  EMULATE and DETECT"
        echo ""
        echo "    Windows 10..:  Windows target box"
        echo ""
        echo "    Ubuntu 20.04....:  Linux target box"
        echo ""
        #echo "    Redops......:  Linux adversary box"
        #echo ""
        #echo ""
        read -rp " Proceed to deploy this configuration? [Y/N]: " yn
        case $yn in
            [Yy]* )
                echo ""
                echo ""
                echo " Deploying all boxes with vagrant up!";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                echo "";
                echo "";
                vagrant up "${ELASTIC}" "${WINDOWS}" "${UBUNTU}"; sleep 5;
                echo " Clearing any alerts that might have been generated by the agents.."
                delete_signals;
                sleep 2;
                echo "";
                echo "";
                echo "";
                echo " Vagrant Up Complete! Snapshotting each box...";
                echo " This can be used as a clean-slate restore point.";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                echo "";
                echo "";
                sleep 2;
                snapshot;
                echo "";
                echo "";
                echo "";
                echo " Deployment Complete! Returning to the Main Menu...";
                echo -e " ${LIGHTPURPLE}---------------------------------------------${NC}";
                sleep 5;
                main; break;;
            [Nn]* ) deploy; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Custom deploy consists of elastic box PLUS:
deploy_custom() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo "The Elastic and Redops boxes are required."
        echo "What TARGET boxes would you like to deploy?"
        echo ""
        read -rp "Deploy the Windows10 target? [Y/N]: " yn
        case $yn in
            [Yy]* ) WINDOWS="ts.windows10"; break;;
            [Nn]* ) WINDOWS=""; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        read -rp "Deploy the Ubuntu20.04 target? [Y/N]: " yn
        case $yn in
            [Yy]* ) UBUNTU="ts.ubuntu20.04"; break;;
            [Nn]* ) UBUNTU=""; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo ""
        echo " You have chosen the following Custom Deployment:"
        echo ""
        echo " - STACK..: "${ELASTIC}" (required)"
        echo " - CONTROL...: "${REDOPS}" (required)"
        echo " - target...: "${WINDOWS}""
        echo " - target...: "${UBUNTU}""
        echo ""
        read -rp "Confirm to proceed with deployment [Y/N]: " yn
        case $yn in
            [Yy]* )
                echo "You have chosen the "${ELASTIC}" "${REDOPS}" "${WINDOWS}" "${UBUNTU}""
                vagrant up ${ELASTIC} ${REDOPS} ${WINDOWS} ${UBUNTU};
                sleep 10;
                snapshot;
                break;;
            [Nn]* ) deploy; break;;
            [Bb]* )
                clear;
                main;
                break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}

# Staged deployment pulls all selected boxes for later startup
deploy_staged() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo "  The Elastic box is required and will be pulled."
        echo "  Select the TARGET boxes to include with it:"
        echo ""
        read -rp "  Pre-stage the Windows10 target? [Y/N]: " yn
        case $yn in
            [Yy]* ) WINDOWS="ts.windows10"; break;;
            [Nn]* ) WINDOWS=""; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        read -rp "  Pre-stage the Ubuntu20.04 target? [Y/N]: " yn
        case $yn in
            [Yy]* ) UBUNTU="ts.ubuntu20.04"; break;;
            [Nn]* ) UBUNTU=""; break;;
            [Bb]* ) clear; deploy; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        read -rp "  Pre-stage the Redops (redteam) adversary box? [Y/N]: " yn
        case $yn in
            [Yy]* ) REDOPS="ts.redops"; break;;
            [Nn]* ) REDOPS=""; break;;
            [Bb]* ) clear; deploy; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________  ___           __            ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/ / _ \___ ___  / /__  __ __   ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \  / // / -_) _ \/ / _ \/ // /   ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/ /____/\__/ .__/_/\___/\_, /    ${NC}";
        echo -e "${LIGHTPURPLE}                       /_/          /___/     ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo ""
        echo "  You have chosen to Pre-stage the following boxes:"
        echo ""
        echo "  - STACK..: ${ELASTIC}"
        echo "  - target...: ${WINDOWS}"
        echo "  - target...: ${UBUNTU}"
        #echo "  - CONTROL...: "${REDOPS}""
        echo ""
        read -rp "  Confirm to proceed with pulling the above [Y/N]: " yn
        case $yn in
            [Yy]* )
                clear
                echo ""
                echo "  Staging your selected machines with"
                echo "  the 'vagrant box add' command..."
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                sleep 3
                for machine in elastic windows10 ubuntu20.04
                do
                    vagrant box add -cf "thremulation-station/${machine}";
                done
                echo ""
                echo ""
                echo ""
                echo "  The boxes you selected are staged for"
                echo "  later deployment. Current configuration:"
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo -n -e "${LIGHTGREEN}"
                vagrant box list;
                sleep 1;
                echo -n -e "${NC}"
                echo ""
                echo ""
                echo ""
                echo "  Run 'vagrant up' when ready to deploy."
                echo "  Reference: [vagrantup.com/docs/cli/up]"
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                read -rp "  Return to (M)ain Menu or (E)xit Program: " yn
                case $yn in
                    [Mm]* ) main; break;;
                    [Ee]* ) clear; break;;
                    [Bb]* ) main; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                break;;
            [Nn]* ) deploy; break;;
            [Bb]* )
                clear;
                main;
                break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Display the status of current environment
status() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}      __________     ______       __          ${NC}";
        echo -e "${LIGHTPURPLE}     /_  __/ __/    / __/ /____ _/ /___ _____ ${NC}";
        echo -e "${LIGHTPURPLE}      / / _\ \     _\ \/ __/ _ \/ __/ // (_-< ${NC}";
        echo -e "${LIGHTPURPLE}     /_/ /___/    /___/\__/\_,_/\__/\_,_/___/ ${NC}";
        echo -e "${LIGHTPURPLE}                                              ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                           ${NC}";
        echo -e "${LIGHTPURPLE} ---------------------------------------------${NC}";
        echo ""
        echo ""
        echo "   Vagrant Box Status:"
        echo -e "   ${LIGHTPURPLE}------------------${NC}";
        echo ""
        vagrant status "${ELASTIC}" "${WINDOWS}" "${UBUNTU}"; sleep 2;
        echo ""
        echo ""
        echo "   Elasticsearch Cluster Status:"
        echo -e "   ${LIGHTPURPLE}------------------${NC}";
        echo ""
        echo -n -e "${LIGHTGREEN}"
        status_indexes;
        sleep 1;
        echo -n -e "${NC}"
        echo ""
        echo ""
        echo "   Kibana Service Status: "
        echo '   200 == "OK": '
        echo -e "   ${LIGHTPURPLE}------------------${NC}";
        echo ""
        echo -n -e "${LIGHTGREEN}"
        status_kibana;
        sleep 1;
        echo -n -e "${NC}"
        echo ""
        echo ""
        echo ""
        read -rp "   Return to (M)ain Menu or (E)xit Program: " yn
        case $yn in
            [Mm]* ) main; break;;
            [Ee]* ) clear; break;;
            [Bb]* ) main; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}


# Checks the elasticsearch index health that lives on the elastic box
status_indexes() {
    curl -X GET "192.168.56.10:9200/_cluster/health?pretty"
}


# Checks that Kibana is reachable
status_kibana() {
    curl -s -o /dev/null -w "%{http_code}" -kIu vagrant:vagrant http://192.168.56.10:5601/api/status
}


# Curl the Elasticsearch API to dump the index, not the index pattern
# Resetting that would be a pain to do over and over and over...
delete_indexes() {
    curl -X GET "192.168.56.10:9200/_cat/indices"
    curl -X DELETE "192.168.56.10:9200/logs-*"
    curl -X DELETE "192.168.56.10:9200/winlogbeat-*"
    curl -X DELETE "192.168.56.10:9200/filebeat-*"
    curl -X DELETE "192.168.56.10:9200/_data_stream/*"
}

delete_signals() {
    curl -H "Content-Type: application/json" -XPOST "https://192.168.56.10:9200/.siem-signals-default-*/_delete_by_query" -k -u elastic:vagrant -d \
                '{
                    "query": {
                        "match": {
                            "signal.status": "open"
                            }
                    }
                }'
}

# Function to perform management tasks
manage() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}    __________     __  ___                        ${NC}";
        echo -e "${LIGHTPURPLE}   /_  __/ __/    /  |/  /__  ___  ___  ___  ___  ${NC}";
        echo -e "${LIGHTPURPLE}    / / _\ \     / /|_/ / _ \/ _ \/ _ \/ _ \/ -_) ${NC}";
        echo -e "${LIGHTPURPLE}   /_/ /___/    /_/  /_/\_,_/_//_/\_,_/\_, /\__/  ${NC}";
        echo -e "${LIGHTPURPLE}                                      /___/       ${NC}";
        echo -e "${LIGHTPURPLE}   (B)ack to Main or (E)xit                       ${NC}";
        echo -e "${LIGHTPURPLE} ------------------------------------------------ ${NC}";
        echo ""
        echo ""
        echo -e "${LIGHTPURPLE}             --- Maintenance ---${NC}"
        echo ""
        echo "1. List............:  list all current boxes"
        echo "2. Resume..........:  resume the local boxes"
        echo "3. Suspend.........:  pause running boxes"
        echo "4. Update..........:  update boxes to latest version"
        echo "5. Reboot..........:  restart boxes (troubleshooting)"
        echo ""
        echo ""
        echo -e "${LIGHTPURPLE}    --- Data Reset and Troubleshooting ---${NC}"
        echo ""
        echo "6. Clear Data......:  delete data in all indexes"
        echo "7. Clear Alerts....:  delete alerts that are open"
        echo "8. Soft Reset......:  revert to original snapshots"
        echo "9. Hard Reset......:  destroy all vms"
        echo -e "10. ${LIGHTRED}Nuke and Pave${NC}...:  destroy all vms and boxes"
        echo ""
        echo ""
        read -rp "  Select Above Option: " yn
        case $yn in
            [1]* )
                echo ""
                echo ""
                echo "  Current box listing:";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                vagrant box list;
                echo ""
                echo ""
                read -rp " (B)ack or (M)ain Menu: " yn
                case $yn in
                    [Bb]* ) manage; break;;
                    [Mm]* ) main; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                break;;
            [2]* )
                echo ""
                echo ""
                echo "  Resuming up all local boxes";
                resume;
                break;;
            [3]* )
                echo ""
                echo ""
                echo "  Suspending all of the running boxes";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                vagrant suspend "${ELASTIC}" "${WINDOWS}" "${UBUNTU}"; # Added names because on windows leaving this blank does not work
                echo ""
                echo ""
                read -rp " (B)ack or (M)ain Menu: " yn
                case $yn in
                    [Bb]* ) manage; break;;
                    [Mm]* ) main; break;;
                    [Ee]* ) main; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                break;;
            [4]* )
                echo ""
                echo ""
                echo "  Updating boxes to the latest version";
                echo "  Pulling from Vagrant Cloud...";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                vagrant box update; # may need -f
                echo ""
                echo ""
                read -rp " (B)ack or (M)ain Menu: " yn
                case $yn in
                    [Bb]* ) manage; break;;
                    [Mm]* ) main; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                break;;
            [5]* )
                echo ""
                echo ""
                echo "  Rebooting All VMs...";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                vagrant reload --no-provision "${ELASTIC}" "${WINDOWS}" "${UBUNTU}";
                echo ""
                echo ""
                read -rp " (B)ack or (M)ain Menu: " yn
                case $yn in
                    [Bb]* ) manage; break;;
                    [Mm]* ) main; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                break;;
            [6]* )
                echo ""
                echo ""
                echo "  Starting Data Rest...";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                sleep 3;
                delete_indexes;
                sleep 1;
                echo ""
                echo ""
                echo ""
                echo "  All Elasticsearch Indexes Cleared";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                read -rp "  (B)ack or (M)ain Menu: " yn
                case $yn in
                    [Bb]* ) manage; break;;
                    [Mm]* ) main; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                break;;
            [7]* )
                echo ""
                echo ""
                echo " Clearing out any alerts created as a part of testing";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                sleep 3;
                delete_signals;
                sleep 1;
                echo ""
                echo ""
                echo ""
                echo " Alerts cleared! Going back to the main menu.";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                sleep 5;
                main;
                break;;
            [8]* )
                echo ""
                echo ""
                echo "  Soft Reset: Rolling back all VMs";
                echo "  Reverting to initial snapshot...";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                read -rp "  Proceed with this destructive change? [Y/N]: " yn
                case $yn in
                    [Yy]* ) snapshot_restore;;
                    [Nn]* ) manage; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                echo ""
                echo ""
                read -rp " (B)ack or (M)ain Menu: " yn
                case $yn in
                    [Bb]* ) manage; break;;
                    [Mm]* ) main; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                break;;
            [9]* )
                echo "";
                echo "";
                echo -e "  ${LIGHTRED}Hard Reset: Deleting VMS!${NC}";
                echo "  Deleting VMs but keeping local boxes";
                echo "  You have 5 seconds to cancel [ctrl+c]...";
                echo ""
                echo ""
                sleep 5;
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                vagrant destroy -f "${ELASTIC}" "${WINDOWS}" "${UBUNTU}";
                echo "";
                echo "";
                echo "  All VMs deleted! Returning to Menu";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                sleep 5;
                main;
                break;;
            [10]* )
                echo ""
                echo ""
                echo -e "      ${LIGHTRED}--- OPERATION ROLLING THUNDER ---${NC}";
                echo -e "         ${LIGHTRED}DELETING ALL VMs and BOXES!${NC}";
                echo -e "         ${LIGHTRED}5 seconds to cancel [ctrl+c]${NC}";
                echo ""
                echo ""
                sleep 5;
                nuke_pave;
                echo "";
                echo "";
                echo "  All VMs and BOXES deleted! Returning to Menu";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                sleep 5;
                main;
                break;;
            [Bb]* ) clear; main; break;;
            [Ee]* ) clear; exit; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}

resume() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}    __________     __  ___                        ${NC}";
        echo -e "${LIGHTPURPLE}   /_  __/ __/    /  |/  /__  ___  ___  ___  ___  ${NC}";
        echo -e "${LIGHTPURPLE}    / / _\ \     / /|_/ / _ \/ _ \/ _ \/ _ \/ -_) ${NC}";
        echo -e "${LIGHTPURPLE}   /_/ /___/    /_/  /_/\_,_/_//_/\_,_/\_, /\__/  ${NC}";
        echo -e "${LIGHTPURPLE}                                      /___/       ${NC}";
        echo -e "${LIGHTPURPLE}   (B)ack to Main                                 ${NC}";
        echo -e "${LIGHTPURPLE} ------------------------------------------------ ${NC}";
        echo ""
        echo -e "${LIGHTPURPLE}             --- Resume ---${NC}"
        echo ""
        echo " Resume (A)ll ..............: resume all currently suspended VMs"
        echo " Resume (S)elected Boxes....: choose what VMs to turn back on"
        echo ""
        read -rp " Select Above Option: " yn
        case $yn in
            [Aa]* ) 
                echo ""
                echo ""
                echo "  Resuming all VMs...";
                echo -e "  ${LIGHTPURPLE}-----------------------------------${NC}";
                echo ""
                echo ""
                sleep 3;
                vagrant resume  --no-provision "${ELASTIC}" "${WINDOWS}" "${UBUNTU}";
                sleep 1;
                echo ""
                echo ""
                read -rp "  (B)ack or (M)ain Menu: " yn
                case $yn in
                    [Bb]* ) manage; break;;
                    [Mm]* ) main; break;;
                    * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
                esac
                break;;
            [Ss]* ) resume_custom; break;;
            [Bb]* ) manage; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}

resume_custom() {
    while true; do
        clear
        echo -e "${LIGHTPURPLE}    __________     __  ___                        ${NC}";
        echo -e "${LIGHTPURPLE}   /_  __/ __/    /  |/  /__  ___  ___  ___  ___  ${NC}";
        echo -e "${LIGHTPURPLE}    / / _\ \     / /|_/ / _ \/ _ \/ _ \/ _ \/ -_) ${NC}";
        echo -e "${LIGHTPURPLE}   /_/ /___/    /_/  /_/\_,_/_//_/\_,_/\_, /\__/  ${NC}";
        echo -e "${LIGHTPURPLE}                                      /___/       ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                               ${NC}";
        echo -e "${LIGHTPURPLE} -------------------------------------------------${NC}";
        echo ""
        echo " The Elastic box is required."
        echo -e " Select the boxes you would like to turn back on along with it:"
        echo ""
        read -rp " Resume the Windows10 VM? [Y/N]: " yn
        case $yn in
            [Yy]* ) WINDOWS="ts.windows10"; break;;
            [Nn]* ) WINDOWS=""; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}    __________     __  ___                        ${NC}";
        echo -e "${LIGHTPURPLE}   /_  __/ __/    /  |/  /__  ___  ___  ___  ___  ${NC}";
        echo -e "${LIGHTPURPLE}    / / _\ \     / /|_/ / _ \/ _ \/ _ \/ _ \/ -_) ${NC}";
        echo -e "${LIGHTPURPLE}   /_/ /___/    /_/  /_/\_,_/_//_/\_,_/\_, /\__/  ${NC}";
        echo -e "${LIGHTPURPLE}                                      /___/       ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                               ${NC}";
        echo -e "${LIGHTPURPLE} -------------------------------------------------${NC}";
        echo ""
        read -rp "Resume the Ubuntu20.04 VM? [Y/N]: " yn
        case $yn in
            [Yy]* ) UBUNTU="ts.ubuntu20.04"; break;;
            [Nn]* ) UBUNTU=""; break;;
            [Bb]* ) clear; deploy; break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
    while true; do
        clear
        echo -e "${LIGHTPURPLE}    __________     __  ___                        ${NC}";
        echo -e "${LIGHTPURPLE}   /_  __/ __/    /  |/  /__  ___  ___  ___  ___  ${NC}";
        echo -e "${LIGHTPURPLE}    / / _\ \     / /|_/ / _ \/ _ \/ _ \/ _ \/ -_) ${NC}";
        echo -e "${LIGHTPURPLE}   /_/ /___/    /_/  /_/\_,_/_//_/\_,_/\_, /\__/  ${NC}";
        echo -e "${LIGHTPURPLE}                                      /___/       ${NC}";
        echo -e "${LIGHTPURPLE}     (B)ack to Main                               ${NC}";
        echo -e "${LIGHTPURPLE} -------------------------------------------------${NC}";
        echo ""
        echo ""
        echo " You have chosen resume (turn back on) the following boxes:"
        echo ""
        echo "  - CONTROL..: "${ELASTIC}" (required)"
        echo "  - target...: "${WINDOWS}""
        echo "  - target...: "${UBUNTU}""
        #echo "  - redops...: "${REDOPS}""
        echo ""
        read -rp " Confirm to proceed. [Y/N]: " yn
        case $yn in
            [Yy]* )
                vagrant resume --no-provision "${ELASTIC}" "${WINDOWS}" "${UBUNTU}";
                sleep 10;
                break;;
            [Nn]* ) manage; break;;
            [Bb]* )
                clear;
                main;
                break;;
            * ) echo -e "\n${RED} Selection invalid, try again:${NC} "; sleep 2;;
        esac
    done
}

# Checks to see if vagrant exists
requirements() {
if ! command -v vagrant &> /dev/null
then
    echo ""
    echo "Error: Vagrant is not installed or cannot be found!"
    echo "Please reference docs.thremulation.io for"
    echo "setup instructions."
    exit
fi
}


# Creates a snapshot just in case things go pear-shaped
snapshot() {
    echo ""
    echo ""
    for machine in elastic ubuntu20.04 windows10
    do
        vagrant snapshot save ts."${machine}" ts."${machine}"_initial;
    done
    echo "";
    echo "";
}


# restores initial snapshot if things have indeed gone pear-shaped
snapshot_restore() {
    echo ""
    echo ""
    echo "Restoring Snapshot..."
    for machine in elastic ubuntu20.04 windows10
    do
        vagrant snapshot restore ts."${machine}" ts."${machine}"_initial
    done
}


# This is as bad as it sounds, EVERYTHING dies...EVERYTHING!
nuke_pave() {
    echo ""
    echo -e "         ${LIGHTRED}Destruction Commencing...${NC}"
    echo ""
    vagrant destroy -f "${ELASTIC}" "${WINDOWS}" "${UBUNTU}";

    for machine in elastic windows10 ubuntu20.04
    do
        vagrant box remove "thremulation-station/${machine}";
    done
}


###############################################################################
# Start Program
###############################################################################

if [[ $machine == "Mac" ]]; then
    # host stats
    MACCPU="$(top -l 1 | grep -E "^CPU" | grep -Eo '[^[:space:]]+%' | head -1)"
    MACMEM="$(top -l 1 | grep -E "^Phys" | awk '{ print $2 }')"
    MACDISK="$(df -Ph | grep "/dev/disk1s1s1" | awk '{ print $5 }')"

    CPU="${MACCPU}"
    MEM="${MACMEM}"
    DISK="${MACDISK}"

    main # Execute CLI

elif [[ $machine == "MinGw" ]]; then
    # host stats
    WINCPU="$(wmic cpu get loadpercentage | awk '{ print $1 }' | grep -v "LoadPercentage") %"
    WINMEM="$(systeminfo | grep -e "^Virtual Memory: In Use:" | awk '{ print $5 }')"
    WINDISK=$(df -Ph | grep -e "^C:" | awk '{ print $6 }')

    CPU="${WINCPU}"
    MEM="${WINMEM}"
    DISK="${WINDISK}"

    main # Execute CLI

elif [[ $machine == "Linux" ]]; then
    # host stats
    TUXCPU="$(cat /proc/loadavg | awk '{ print $2 }') %"
    TUXMEM="$(free -t -m | grep "Total" | awk '{ print $3" MB";}')"
    TUXDISK="$(df -Ph | grep -e "^C:" | awk '{ print $5 }')"

    CPU="${TUXCPU}"
    MEM="${TUXMEM}"
    DISK="${TUXDISK}"

    main

else

    main # Execute CLI

fi
